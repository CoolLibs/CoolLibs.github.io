"use strict";(self.webpackChunkcool_doc=self.webpackChunkcool_doc||[]).push([[1369],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||l[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7738:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return u},assets:function(){return p},toc:function(){return l},default:function(){return m}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],c={title:"Unit Type-System",date:new Date("2021-05-28T12:30:06.000Z"),author:"jules",tags:[],toc:!0,draft:!1},s=void 0,u={permalink:"/home/blog/unit-type-system",source:"@site/blog/unit-type-system.md",title:"Unit Type-System",description:"How often have you used an angle in radians when the function was expecting it in degrees, or vice-versa ? I personnaly have, way too often. And so I decided that that time was over. We need to enforce these kind of checks in the signature of our functions and our type-system !",date:"2021-05-28T12:30:06.000Z",formattedDate:"May 28, 2021",tags:[],readingTime:1.09,truncated:!1,authors:[{name:"jules"}],prevItem:{title:"One or Many Repos",permalink:"/home/blog/one-or-many-repos"},nextItem:{title:"Bezier Rgb Curves",permalink:"/home/blog/bezier-rgb-curves"}},p={authorsImageUrls:[void 0]},l=[],d={toc:l};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"How often have you used an angle in radians when the function was expecting it in degrees, or vice-versa ? I personnaly have, way too often. And so I decided that that time was over. We need to enforce these kind of checks in the signature of our functions and our type-system !"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-C++"},"void rotate(Radian angle);\nvoid rotate(Degree angle);\n\nrotate(60_deg);  // User-defined litteral that creates a Degree\nrotate(1.3_rad); // User-defined litteral that creates a Radian\n")),(0,a.kt)("p",null,"How nice would such an API be ? No more confusion as to what type you are supposed to use ; and the compiler can check it too."),(0,a.kt)("p",null,"We can do the same for things like pixels vs. screen coordinates vs. normalized position, and much more ! Maybe even space conversion (world space vs. object space. vs view space vs light space vs. ",(0,a.kt)("em",{parentName:"p"},"etc."),") : applying a matrix of type ",(0,a.kt)("em",{parentName:"p"},"World2View")," to a vector of type ",(0,a.kt)("em",{parentName:"p"},"World")," would return a vector of type ",(0,a.kt)("em",{parentName:"p"},"View"),"."),(0,a.kt)("p",null,"We could also implement all the nice things we are used to in physics : you cannot add meters and seconds, but you can divide meters per seconds to get a velocity. (NB : I have no idea yet as to how to implement the magic the ",(0,a.kt)("em",{parentName:"p"},"builds"),' a type "meter/second" from the types "meter" and "second")'))}m.isMDXComponent=!0}}]);