"use strict";(self.webpackChunkcool_docs=self.webpackChunkcool_docs||[]).push([[1273],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=i.createContext({}),p=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return i.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,k=d["".concat(u,".").concat(m)]||d[m]||c[m]||r;return n?i.createElement(k,l(l({ref:t},s),{},{components:n})):i.createElement(k,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9021:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),l=["components"],o={},u=void 0,p={unversionedId:"lab/Writing Nodes/Inputs",id:"lab/Writing Nodes/Inputs",title:"Inputs",description:"Input values",source:"@site/docs/lab/03-Writing Nodes/20-Inputs.md",sourceDirName:"lab/03-Writing Nodes",slug:"/lab/Writing Nodes/Inputs",permalink:"/lab/Writing Nodes/Inputs",tags:[],version:"current",sidebarPosition:20,frontMatter:{},sidebar:"lab",previous:{title:"Primitive types",permalink:"/lab/Writing Nodes/Primitive types"},next:{title:"Presets",permalink:"/lab/Writing Nodes/Presets"}},s=[{value:"Input values",id:"input-values",children:[],level:2},{value:"Input functions",id:"input-functions",children:[],level:2}],c={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"input-values"},"Input values"),(0,r.kt)("p",null,"Each node can have parameters that will appear as GUI widgets on the node. You declare them using the ",(0,r.kt)("inlineCode",{parentName:"p"},"INPUT")," keyword and their name must start and end with a backtick (`) (This allows their names to include spaces and any other funny character)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-glsl",metastring:'title="Circle (Mask)"',title:'"Circle','(Mask)"':!0},"INPUT float `Radius`;\nINPUT float `Edge blur`;\nINPUT UV    `Center`;\n\nfloat main(UV uv)\n{\n    float d = length(uv - `Center`);\n    return smoothstep(`Edge blur`, 0., d - `Radius`);\n}\n")),(0,r.kt)("p",null,"Here are all the types you can have as a value input:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bool")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"int")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"float")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UV")," (Unlike ",(0,r.kt)("inlineCode",{parentName:"li"},"vec2"),", this will create a point on the screen that you can move around)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"vec2")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"vec3")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"vec4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Angle")," (",(0,r.kt)("inlineCode",{parentName:"li"},"float")," under the hood)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Direction2D")," (",(0,r.kt)("inlineCode",{parentName:"li"},"vec2")," under the hood, guaranteed to be of length 1)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Hue")," (",(0,r.kt)("inlineCode",{parentName:"li"},"float")," under the hood, between 0 and 1)."),(0,r.kt)("li",{parentName:"ul"},"Color (",(0,r.kt)("inlineCode",{parentName:"li"},"CIELAB"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"sRGB"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"LinearRGB")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"HSLuv"),"). See the ",(0,r.kt)("a",{parentName:"li",href:"/lab/Writing%20Nodes/Color%20Spaces"},"Color Spaces section")," to learn all about the various color types. (",(0,r.kt)("inlineCode",{parentName:"li"},"vec3")," under the hood)."),(0,r.kt)("li",{parentName:"ul"},"Color and alpha (",(0,r.kt)("inlineCode",{parentName:"li"},"CIELAB_PremultipliedA"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"CIELAB_StraightA"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"LinearRGB_PremultipliedA"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"LinearRGB_StraightA"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"sRGB_PremultipliedA"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"sRGB_StraightA"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"HSLuv_PremultipliedA")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"HSLuv_StraightA"),"). See the ",(0,r.kt)("a",{parentName:"li",href:"/lab/Writing%20Nodes/Color%20Spaces"},"Color Spaces section")," to learn all about the various color types. (",(0,r.kt)("inlineCode",{parentName:"li"},"vec4")," under the hood).")),(0,r.kt)("h2",{id:"input-functions"},"Input functions"),(0,r.kt)("p",null,"Nodes can also take functions (a.k.a. other nodes) as inputs. You also declare them with the ",(0,r.kt)("inlineCode",{parentName:"p"},"INPUT")," keyword and put their name inside backticks (`). Then to use them you just call them as regular functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-glsl",metastring:'title="RGB Split"',title:'"RGB','Split"':!0},"INPUT UV->sRGB_StraightA `Image`; // This INPUT is a function.\n                                  // You can see that with the ->\n                                  // that separates its input (UV)\n                                  // from its output (sRGB_StraightA).\nINPUT float `Displacement`;\nINPUT Direction2D `Direction`;\n\nsRGB_StraightA main(UV uv)\n{\n    vec4 R = `Image`(uv + `Displacement` * `Direction` );\n    vec4 G = `Image`(uv);\n    vec4 B = `Image`(uv - `Displacement` * `Direction`);\n\n    return vec4(\n        R.r,\n        G.g,\n        B.b,\n        max(max(R.a, G.a), B.a)\n    );\n}\n")),(0,r.kt)("p",null,"To declare a function that takes multiple inputs, here is the syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"INPUT (CIELAB_PremultipliedA, CIELAB_PremultipliedA)->CIELAB_PremultipliedA `Blend Mode`;\n")),(0,r.kt)("p",null,"All the possible types for function inputs are the same as for the ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," function (see the ",(0,r.kt)("a",{parentName:"p",href:"/lab/Writing%20Nodes/Primitive%20types"},"Primitive Types section"),")."))}d.isMDXComponent=!0}}]);