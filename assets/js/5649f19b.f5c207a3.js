"use strict";(self.webpackChunkcool_docs=self.webpackChunkcool_docs||[]).push([[7860],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),d=n,m=u["".concat(s,".").concat(d)]||u[d]||h[d]||o;return r?a.createElement(m,i(i({ref:t},p),{},{components:r})):a.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7400:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const o={title:"The Big Architectural Plan"},i=void 0,l={unversionedId:"lab/Dev/the-big-architectural-plan",id:"lab/Dev/the-big-architectural-plan",title:"The Big Architectural Plan",description:"Our Big Architectural Plan (informally known as BAP) will lay out the foundations for a composable and extensible software that will allow the convergence and interaction of many different generative art techniques. It will be easy to change, control, customize, script and reuse existing components in many different ways.",source:"@site/docs/lab/06-Dev/04-the-big-architectural-plan.md",sourceDirName:"lab/06-Dev",slug:"/lab/Dev/the-big-architectural-plan",permalink:"/lab/Dev/the-big-architectural-plan",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"The Big Architectural Plan"},sidebar:"lab",previous:{title:"Our Roadmap",permalink:"/lab/Dev/our-roadmap"},next:{title:"Inspirations",permalink:"/lab/Dev/inspirations"}},s={},c=[{value:"\u2705 Part 1: Objects Registries",id:"-part-1-objects-registries",level:2},{value:"\ud83d\udea7 Part 2: The Command pattern",id:"-part-2-the-command-pattern",level:2},{value:"\ud83d\udea7 Part 2b: Parameters and History",id:"-part-2b-parameters-and-history",level:2},{value:"\ud83d\udd2d Part 3: The Rendering Dispatcher",id:"-part-3-the-rendering-dispatcher",level:2},{value:"\ud83d\udd2d Part 4: Modules and Scenes",id:"-part-4-modules-and-scenes",level:2},{value:"\ud83d\udd2d Part 5: The Timeline",id:"-part-5-the-timeline",level:2}],p={toc:c},u="wrapper";function h(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Our ",(0,n.kt)("em",{parentName:"p"},"Big Architectural Plan")," (informally known as ",(0,n.kt)("em",{parentName:"p"},"BAP"),") will lay out the foundations for a composable and extensible software that will allow the convergence and interaction of many different generative art techniques. It will be easy to change, control, customize, script and reuse existing components in many different ways."),(0,n.kt)("h2",{id:"-part-1-objects-registries"},(0,n.kt)("a",{parentName:"h2",href:"https://github.com/CoolLibs/reg"},"\u2705 Part 1: Objects Registries")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/CoolLibs/reg"},(0,n.kt)("strong",{parentName:"a"},"Done!")," This is our ",(0,n.kt)("em",{parentName:"a"},"reg")," library.")),(0,n.kt)("h2",{id:"-part-2-the-command-pattern"},"\ud83d\udea7 Part 2: The Command pattern"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/CoolLibs/cmd"},"See the readme of our ",(0,n.kt)("em",{parentName:"a"},"cmd")," library.")),(0,n.kt)("h3",{id:""}),(0,n.kt)("p",null,"What are the problems with global access ? Does our Command-based architexture suffer from it?"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"hard to change: tied to the existence of one specific thing"),(0,n.kt)("li",{parentName:"ul"},"hard to know all the people who mutate it")),(0,n.kt)("h2",{id:"-part-2b-parameters-and-history"},"\ud83d\udea7 Part 2b: Parameters and History"),(0,n.kt)("p",null,"Once the Registries and the Commands are in place we can improve our existing Parameters and History systems. This is an optional step that doesn't prevent us from moving on to part 3."),(0,n.kt)("h2",{id:"-part-3-the-rendering-dispatcher"},"\ud83d\udd2d Part 3: The Rendering Dispatcher"),(0,n.kt)("p",null,'We want to "multithread" our use of the GPU. For example the UI (ImGui) is rendered on the GPU, and we don\'t want it to be blocked by the fact that some of our shaders could take seconds to render a nice ray-traced scene. This should be possible to achieve by using ',(0,n.kt)("em",{parentName:"p"},"Async Compute"),': ImGui is rendered using the "main" graphics queue, while the heavy rendering work is dony on compute-only queues. ',(0,n.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/55272626/what-is-actually-a-queue-family-in-vulkan"},"See this explanation of the different queues and the architecture of modern GPUs"),".",(0,n.kt)("br",null),"\nSince most of our shaders are fullscreen passes they should be easy to turn into compute shaders and run asynchronously."),(0,n.kt)("p",null,'Another technique that will help us is to split the rendering of an image into tiles, allowing us to split the rendering over several frames, and display parts of the image as they get rendered. Or alternatively we could render for example one pixel out of four: this would allow us to have a "low-res" version of our image quickly, and then the other pixels can be computed later. This should be better than the tile-based approach to get an idea of what the whole image looks like. On the other hand the tile-based version quickly shows you the final quality, though on only a fraction of the image.'),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=CFXKTXtil34"},"Mesh shaders")," are also an interesting topic to look into."),(0,n.kt)("h2",{id:"-part-4-modules-and-scenes"},"\ud83d\udd2d Part 4: Modules and Scenes"),(0,n.kt)("p",null,"Modules know what their dependencies are, and only refresh their output image when needed. A ",(0,n.kt)("inlineCode",{parentName:"p"},"Scene")," is a graph of modules that interact together."),(0,n.kt)("h2",{id:"-part-5-the-timeline"},"\ud83d\udd2d Part 5: The Timeline"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"Timeline")," lays out the different ",(0,n.kt)("inlineCode",{parentName:"p"},"Scene"),"s in time, and allows basic compositing of them (for example one scene on top of another)."))}h.isMDXComponent=!0}}]);