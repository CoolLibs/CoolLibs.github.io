"use strict";(self.webpackChunkcool_docs=self.webpackChunkcool_docs||[]).push([[8156],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},130:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={},s=void 0,c={unversionedId:"lab/Writing Nodes/Intro",id:"lab/Writing Nodes/Intro",title:"Intro",description:"CoolLab nodes are tiny fragments of shader code written in glsl. If you don't know what that is you can start by watching tutorials from The Art of Code.",source:"@site/docs/lab/03-Writing Nodes/00-Intro.md",sourceDirName:"lab/03-Writing Nodes",slug:"/lab/Writing Nodes/Intro",permalink:"/lab/Writing Nodes/Intro",tags:[],version:"current",sidebarPosition:0,frontMatter:{},sidebar:"lab",previous:{title:"Node | Sphere",permalink:"/lab/Tutorials/is0/Sphere"},next:{title:"Primitive types",permalink:"/lab/Writing Nodes/Primitive types"}},u=[],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"CoolLab nodes are tiny fragments of shader code written in glsl. If you don't know what that is you can start by ",(0,a.kt)("a",{parentName:"p",href:"https://youtu.be/u5HAYVHsasc"},"watching tutorials from The Art of Code"),"."),(0,a.kt)("p",null,"To create a new node you need to add a new ",(0,a.kt)("em",{parentName:"p"},".clbnode")," file in the ",(0,a.kt)("em",{parentName:"p"},"Nodes")," folder that is next to your CoolLab executable. The ",(0,a.kt)("em",{parentName:"p"},"Nodes")," folder contains several folders representing the different categories of nodes. You can create a new category by simply creating a new folder, but most likely your node will already belong to one of the existing categories."),(0,a.kt)("p",null,"Here is an example of a very basic node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-glsl",metastring:'title="Invert Color.clbnode"',title:'"Invert','Color.clbnode"':!0},"sRGB main(sRGB color)\n{\n    return vec3(1.) - color;\n}\n")),(0,a.kt)("p",null,"All nodes need to have a function called ",(0,a.kt)("inlineCode",{parentName:"p"},"main"),": this is what will be used to apply the effect on whichever node will be plugged into your node.",(0,a.kt)("br",null),"\nIn CoolLab a lot of implicit conversions and code generation happen behind the scene. This means that you can write minimal nodes and the rest will happen automagically. For example our ",(0,a.kt)("inlineCode",{parentName:"p"},"Invert Color")," node takes a color and outputs a new color. If you plug a whole image into the ",(0,a.kt)("inlineCode",{parentName:"p"},"Invert Color")," node, the ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," function you defined will be called on each pixel of the image, thus creating a new image with inverted colors. Notice that in our ",(0,a.kt)("inlineCode",{parentName:"p"},"Invert Color")," node we never mentioned images, only colors, which is a simpler and smaller building block. This is great! Our nodes stay very simple and focused on what they want to achieve."),(0,a.kt)("p",null,"It is possible for the ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," function to have several inputs, ",(0,a.kt)("em",{parentName:"p"},"but they must all be of the same type"),":",(0,a.kt)("sup",{parentName:"p",id:"fnref-1"},(0,a.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-glsl",metastring:'title="Add.clbnode"',title:'"Add.clbnode"'},"float main(float x, float y)\n{\n    return x + y;\n}\n")),(0,a.kt)("p",null,"Also, it is possible that your ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," function doesn't take any input at all if it represents a constant:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-glsl",metastring:'title="Float Value.clbnode"',title:'"Float','Value.clbnode"':!0},"INPUT float `Value`;\n\nfloat main()\n{\n    return `Value`;\n}\n")),(0,a.kt)("div",{className:"footnotes"},(0,a.kt)("hr",{parentName:"div"}),(0,a.kt)("ol",{parentName:"div"},(0,a.kt)("li",{parentName:"ol",id:"fn-1"},"If you have a use case where this limitation is annoying to you, feel free to ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoolLibs/Lab/issues/new?assignees=&labels=enhancement%2Ctriage&template=feature-suggestion.yaml&title=%5BFeature%5D+"},"contact us")," and we will happily consider your use case and improve CoolLab to make it fit your needs.",(0,a.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}d.isMDXComponent=!0}}]);