"use strict";(self.webpackChunkcool_docs=self.webpackChunkcool_docs||[]).push([[772],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=p(r),d=o,m=f["".concat(l,".").concat(d)]||f[d]||c[d]||a;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},7552:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return f}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={},l=void 0,p={unversionedId:"lab/Writing Nodes/Color Spaces",id:"lab/Writing Nodes/Color Spaces",title:"Color Spaces",description:"All our user inputs are in sRGB, straight alpha space.",source:"@site/docs/lab/03-Writing Nodes/04-Color Spaces.md",sourceDirName:"lab/03-Writing Nodes",slug:"/lab/Writing Nodes/Color Spaces",permalink:"/lab/Writing Nodes/Color Spaces",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"lab",previous:{title:"Output Indices",permalink:"/lab/Writing Nodes/Output Indices"},next:{title:"Our Philosophy",permalink:"/lab/Dev/our-philosophy"}},u=[],c={toc:u};function f(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"All our user inputs are in ",(0,a.kt)("strong",{parentName:"p"},"sRGB, straight alpha")," space.",(0,a.kt)("br",null),"\nBUT when the shader asks for some ",(0,a.kt)("em",{parentName:"p"},"RGB")," or ",(0,a.kt)("em",{parentName:"p"},"RGBA"),", we use ",(0,a.kt)("strong",{parentName:"p"},"linear RGB and premultiplied alpha"),". Using premultiplied alpha means that things like blending and blurring will behave naturally (",(0,a.kt)("a",{parentName:"p",href:"https://youtu.be/WtYfF48Z9mA?list=PL9_jI1bdZmz2emSh0UQ5iOdT2xRHFHL7E&t=960"},"see this great lesson"),"). Linear RGB is better for most computations (see ",(0,a.kt)("a",{parentName:"p",href:"https://youtu.be/LKnqECcg6Gw"},"this")," (and also ",(0,a.kt)("a",{parentName:"p",href:"https://youtu.be/nIaczt4F2D4"},"this")," to see why Lab is even better)). Light-based effects should be done in linear (blur, chromatic aberration, addition, over, etc.); color-distance based effects should be done in Lab (gradient, mapping a color to the closest one in a set, etc.)"),(0,a.kt)("p",null,"NB: for RGB->RGB effects, if some RGBA is plugged in as input, we first un-premultiply the RGB, then pass it to the effect, then re-premultiply. This is the same behavior as ",(0,a.kt)("a",{parentName:"p",href:"https://youtu.be/klqSJiPqmGU"},'"Pre-Divide / Post-Multiply" in Resolve/Fusion'),". This basically means that everything will work as expected intuitively and you don't have to worry about it."))}f.isMDXComponent=!0}}]);