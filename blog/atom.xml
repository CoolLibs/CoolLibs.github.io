<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://coollibs.github.io/blog</id>
    <title>Cool Blog</title>
    <updated>2022-08-23T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://coollibs.github.io/blog"/>
    <subtitle>Cool Blog</subtitle>
    <icon>https://coollibs.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Shader Programming made Functional]]></title>
        <id>/2022/08/23/shader-programming-made-functional</id>
        <link href="https://coollibs.github.io/blog/2022/08/23/shader-programming-made-functional"/>
        <updated>2022-08-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[&nbsp&nbsp&nbsp&nbsp&nbsp üë©‚Äçüíª GLSL is a pretty low-level language. But what if we turned it into a classy functional programming language capable of handling higher-order functions? That is, giving it the ability to pass functions as parameters to other functions. Well, this is exactly what CoolLab does!]]></summary>
        <content type="html"><![CDATA[<p>&nbsp;<!-- -->&nbsp;<!-- -->&nbsp;<!-- -->&nbsp;<!-- -->&nbsp;<!-- --> üë©‚Äçüíª GLSL is a pretty low-level language. But what if we turned it into a classy <strong>functional programming language</strong> capable of handling <strong>higher-order functions</strong>? That is, giving it the ability to pass functions as parameters to other functions. <em>Well, this is exactly what CoolLab does!</em></p><p>&nbsp;<!-- -->&nbsp;<!-- -->&nbsp;<!-- -->&nbsp;<!-- -->&nbsp;<!-- --> In fact higher-order functions are so important that Inigo Quilez often usees them <a href="https://iquilezles.org/articles/distfunctions/" target="_blank" rel="noopener noreferrer">in pseudo-code</a>:
<img src="/assets/images/spmf1-aa871adf591d091f094f570995e39019.png" width="879" height="164"></p><p>&nbsp;<!-- -->&nbsp;<!-- -->&nbsp;<!-- -->&nbsp;<!-- -->&nbsp;<!-- -->This idea stemed from the observation that <em>modifiers</em>, in order to modify an existing SDF, must change either its input or its output (sometimes both). This is why a CoolLab graph cannot be interpreted as a flow of data between functions: some nodes even though after some other node, must apply changes to the input of the function coming before them. In order to make this generic and give each node full control, we hade to make this functional: each node receives one (or more) function.s, and does whatever it wants with them: it can evaluate them with different input, evaluate them several times, whatever!</p><p>TODO show how we define a node</p><p>TODO Show a graph</p><p>TODO Here is the code that gets generated:</p>]]></content>
        <author>
            <name>Jules Fouchy</name>
            <uri>https://julesfouchy.github.io/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How I implemented scripting in two hours]]></title>
        <id>/2022/04/29/scripting</id>
        <link href="https://coollibs.github.io/blog/2022/04/29/scripting"/>
        <updated>2022-04-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[You can now write scripts to control CoolLab. Everything that you can do in the UI in now also doable through scripts.]]></summary>
        <content type="html"><![CDATA[<p>You can now write scripts to control CoolLab. Everything that you can do in the UI in now also doable through scripts.<br>
Moreover, you can write those scripts in <strong><em>the language of your choice</em></strong>! That's right, <strong><em>every</em></strong> language in the world will do, even the one you wrote last weekend and that only you possesses an interpreter for.</p><p>All of this magic relies on a well knwown friend: <strong>the HTTP protocol</strong>.</p><p>We provide an API that anyone can call; as long as you know how to make http requests from your language, you can write scripts for CoolLab.</p><p>Pros:</p><ul><li></li></ul><p>Cons:</p><ul><li></li></ul>]]></content>
        <author>
            <name>Jules Fouchy</name>
            <uri>https://julesfouchy.github.io/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Doing better than C++'s references (&)]]></title>
        <id>/2021/05/28/doing-better-than-cpp-references</id>
        <link href="https://coollibs.github.io/blog/2021/05/28/doing-better-than-cpp-references"/>
        <updated>2021-05-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Introducing our reg library!]]></summary>
        <content type="html"><![CDATA[<p>Introducing our <a href="https://github.com/CoolLibs/reg" target="_blank" rel="noopener noreferrer"><em>reg</em></a> library!</p>]]></content>
        <author>
            <name>Jules Fouchy</name>
            <uri>https://julesfouchy.github.io/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ints cause precision errors]]></title>
        <id>/2021/05/28/ints-cause-precision-errors</id>
        <link href="https://coollibs.github.io/blog/2021/05/28/ints-cause-precision-errors"/>
        <updated>2021-05-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[After a lot of trouble and bugs, I have come to the conclusion that you sould use floats most of the time.]]></summary>
        <content type="html"><![CDATA[<p>After a lot of trouble and bugs, I have come to the conclusion that you sould use floats most of the time.</p><p>The reason is simple : when you are doing maths, it is rare that the logic of your calculations will only output integers.</p><p>Integers are good for one thing : absolutely perfect 100% exactness. This properly is rarely required ; the only case I typically encounter is indexing into an array. But even though they are good at representing <em>some</em> numbers exactly, they are very bad at doing calculations in general because they need to <em>round</em> to the nearest integer. And in most cases I much rather have 3 / 2 = 1.5000000000001 than 3 / 2 = 1 ; this second calculation is really not what you want in 99% of the cases, except if you are specifically dealing with an integer reasoning. And, let me reiterate it, there is almost no problem or domain model were the only sensible values are integers. Most of the time we want the middle of 1 and 4 to be 2.5, not 2.</p><p>One common misconception is that, when positionning shapes in space, since the coordinates are expressed in pixels, people tend to use integer to represent them. But this is wrong, and I realized it as I was doing a fractal.</p><p>Why is it so tilted ? Because I am constantly rounding my position to the nearest integer as I trace the fractal, and the errors accumulate to some significant amounts over time.
The rounding to an integer should be done at the last moment, when rendering. Before that we want to be as exact as possible about are actual position in space, and integers are absolutely not fit for that job.</p>]]></content>
        <author>
            <name>Jules Fouchy</name>
            <uri>https://julesfouchy.github.io/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Dear ImGui model for user extensibility]]></title>
        <id>/2021/05/28/the-dear-imgui-model</id>
        <link href="https://coollibs.github.io/blog/2021/05/28/the-dear-imgui-model"/>
        <updated>2021-05-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Remove dependency on a backend, let users implement it the way they like, and provide implementations for popluar backend.]]></summary>
        <content type="html"><![CDATA[<p>Remove dependency on a backend, let users implement it the way they like, and provide implementations for popluar backend.</p><p>I was scared to generalize my <em>cam</em> library because I thought I would need to use template, and know how to get the transpose of a matric for example. But this is much simpler, flexible, and does come with all the annoyances of templates (all the code in headers, harder for ides to handle)</p><p>I don't know if its fait to call it that way; don't know if others do the same;.</p>]]></content>
        <author>
            <name>Jules Fouchy</name>
            <uri>https://julesfouchy.github.io/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unit Type-System]]></title>
        <id>/2021/05/28/unit-type-system</id>
        <link href="https://coollibs.github.io/blog/2021/05/28/unit-type-system"/>
        <updated>2021-05-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How often have you used an angle in radians when the function was expecting it in degrees, or vice-versa? I personnaly have, way too often. And so I decided that that time was over. We need to enforce these kind of checks in the signature of our functions and our type-system!]]></summary>
        <content type="html"><![CDATA[<p>How often have you used an angle in radians when the function was expecting it in degrees, or vice-versa? I personnaly have, way too often. And so I decided that that time was over. We need to enforce these kind of checks in the signature of our functions and our type-system!</p><div class="codeBlockContainer_I0IT language-C++ theme-code-block"><div class="codeBlockContent_wNvx C++"><pre tabindex="0" class="prism-code language-C++ codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">void rotate(Radian angle);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">void rotate(Degree angle);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">rotate(60_deg);  // User-defined litteral that creates a Degree</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">rotate(1.3_rad); // User-defined litteral that creates a Radian</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>How nice would such an API be? No more confusion as to what type you are supposed to use ; and the compiler can check it too.</p><p>We can do the same for things like pixels vs. screen coordinates vs. normalized position, and much more! Maybe even space conversion (world space vs. object space. vs view space vs light space vs. <em>etc.</em>): applying a matrix of type <em>World2View</em> to a vector of type <em>World</em> would return a vector of type <em>View</em>.</p><p>We could also implement all the nice things we are used to in physics: you cannot add meters and seconds, but you can divide meters per seconds to get a velocity. (NB: I have no idea yet as to how to implement the magic the <em>builds</em> a type "meter/second" from the types "meter" and "second")</p>]]></content>
        <author>
            <name>Jules Fouchy</name>
            <uri>https://julesfouchy.github.io/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hijacking the Dereference Operators]]></title>
        <id>/2021/05/26/hijacking-the-dereference-operators</id>
        <link href="https://coollibs.github.io/blog/2021/05/26/hijacking-the-dereference-operators"/>
        <updated>2021-05-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I often end up writting classes that wrap other classes or primitive types.]]></summary>
        <content type="html"><![CDATA[<p>I often end up writting classes that wrap other classes or primitive types.</p><div class="codeBlockContainer_I0IT language-cpp theme-code-block"><div class="codeBlockContent_wNvx cpp"><pre tabindex="0" class="prism-code language-cpp codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">MyData</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">float</span><span class="token plain"> field1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">float</span><span class="token plain"> field2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">float</span><span class="token plain"> field3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">float</span><span class="token plain"> field4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">float</span><span class="token plain"> field5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">do_something</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT language-cpp theme-code-block"><div class="codeBlockContent_wNvx cpp"><pre tabindex="0" class="prism-code language-cpp codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">MyDataWrapper</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">do_something_else</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      MyData _my_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>And for a long time I was annoyed when needing to access the underlying wrapped class. At first I was writting one getter function for each method or field of the wrapped class that I still needed to access.</p><div class="codeBlockContainer_I0IT language-cpp theme-code-block"><div class="codeBlockContent_wNvx cpp"><pre tabindex="0" class="prism-code language-cpp codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">MyDataWrapper</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">do_something_else</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)">// -- Getters --</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">float</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">field1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> _my_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">field1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">float</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">field2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> _my_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">field2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">float</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">field3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> _my_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">field3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">float</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">field4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> _my_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">field4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">float</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">field5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> _my_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">field5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">do_something</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> _my_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">do_something</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)">// -- Getters --</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      MyData _my_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>But that was a lot of boilerplate code to write and I couldn't stand it. It get's especially annoying when you do some refactor or API change, because now you have to propagate the changes in two classes instead of one.</p><p> So I moved to having only one getter function, typically called <em>get</em>, that would return a reference to the whole wrapped class.</p><div class="codeBlockContainer_I0IT language-cpp theme-code-block"><div class="codeBlockContent_wNvx cpp"><pre tabindex="0" class="prism-code language-cpp codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">MyDataWrapper</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">do_something_else</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     </span><span class="token comment" style="color:rgb(98, 114, 164)">// -- Getters --</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> MyData</span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">get</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> _my_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     </span><span class="token comment" style="color:rgb(98, 114, 164)">// -- Getters --</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     MyData _my_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>In my opinion this is already much better because the implementor of the wrapper class needs to write way less code, and doesn't need to maintain it when the wrapped class changes.</p><p>But the API isn't as nice anymore ! We moved from</p><div class="codeBlockContainer_I0IT language-cpp theme-code-block"><div class="codeBlockContent_wNvx cpp"><pre tabindex="0" class="prism-code language-cpp codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">my_data_wrapper</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">do_something</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>to</p><div class="codeBlockContainer_I0IT language-cpp theme-code-block"><div class="codeBlockContent_wNvx cpp"><pre tabindex="0" class="prism-code language-cpp codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">my_data_wrapper</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">get</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">do_something</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Basically, no matter what I call my getter function, it is still too long of a name and clutters the code.</p><p>So here comes the ultimate solution : <strong>Overload the dereference operators</strong> ! This makes the API only one character longuer than the original solution, and doesn't require the implementor to write a lot of boilerplate code either ! The best of both worlds !</p><div class="codeBlockContainer_I0IT language-cpp theme-code-block"><div class="codeBlockContent_wNvx cpp"><pre tabindex="0" class="prism-code language-cpp codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">my_data_wrapper</span><span class="token operator">-&gt;</span><span class="token function" style="color:rgb(80, 250, 123)">do_something</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>The only downside I can think of is that the syntax can be confusing for people who are not used to this pattern ; but I swear that when you are used to it, this is the greatest thing ever !</p><p>For reference, this is how you would overload the dereference operators :</p><div class="codeBlockContainer_I0IT language-cpp theme-code-block"><div class="codeBlockContent_wNvx cpp"><pre tabindex="0" class="prism-code language-cpp codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">MyDataWrapper</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">do_something_else</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)">// -- Getters --</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> MyData</span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">operator</span><span class="token operator">*</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> _my_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> MyData</span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">operator</span><span class="token operator">-&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">operator</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Reuse the implementation of operator*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)">// -- Getters --</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      MyData _my_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>You can see this pattern in action in the <a href="https://github.com/CoolLibs/Params/blob/main/src/Cool/Params/Params.h" target="_blank" rel="noopener noreferrer"><em>Params</em> module</a> for example.</p><p>This is also used in <a href="https://en.cppreference.com/w/cpp/utility/optional" target="_blank" rel="noopener noreferrer">std::optional</a> by the way !</p>]]></content>
        <author>
            <name>Jules Fouchy</name>
            <uri>https://julesfouchy.github.io/</uri>
        </author>
    </entry>
</feed>