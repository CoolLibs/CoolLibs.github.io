{"searchDocs":[{"title":"Doing better than C++'s references (&)","type":0,"sectionRef":"#","url":"/blog/2021/05/28/doing-better-than-cpp-references","content":"Introducing our reg library!","keywords":"","version":null},{"title":"Ints cause precision errors","type":0,"sectionRef":"#","url":"/blog/2021/05/28/ints-cause-precision-errors","content":"After a lot of trouble and bugs, I have come to the conclusion that you sould use floats most of the time. The reason is simple : when you are doing maths, it is rare that the logic of your calculations will only output integers. Integers are good for one thing : absolutely perfect 100% exactness. This properly is rarely required ; the only case I typically encounter is indexing into an array. But even though they are good at representing some numbers exactly, they are very bad at doing calculations in general because they need to round to the nearest integer. And in most cases I much rather have 3 / 2 = 1.5000000000001 than 3 / 2 = 1 ; this second calculation is really not what you want in 99% of the cases, except if you are specifically dealing with an integer reasoning. And, let me reiterate it, there is almost no problem or domain model were the only sensible values are integers. Most of the time we want the middle of 1 and 4 to be 2.5, not 2. One common misconception is that, when positionning shapes in space, since the coordinates are expressed in pixels, people tend to use integer to represent them. But this is wrong, and I realized it as I was doing a fractal. Why is it so tilted ? Because I am constantly rounding my position to the nearest integer as I trace the fractal, and the errors accumulate to some significant amounts over time. The rounding to an integer should be done at the last moment, when rendering. Before that we want to be as exact as possible about are actual position in space, and integers are absolutely not fit for that job.","keywords":"","version":null},{"title":"Unit Type-System","type":0,"sectionRef":"#","url":"/blog/2021/05/28/unit-type-system","content":"How often have you used an angle in radians when the function was expecting it in degrees, or vice-versa? I personnaly have, way too often. And so I decided that that time was over. We need to enforce these kind of checks in the signature of our functions and our type-system! void rotate(Radian angle); void rotate(Degree angle); rotate(60_deg); // User-defined litteral that creates a Degree rotate(1.3_rad); // User-defined litteral that creates a Radian How nice would such an API be? No more confusion as to what type you are supposed to use ; and the compiler can check it too. We can do the same for things like pixels vs. screen coordinates vs. normalized position, and much more! Maybe even space conversion (world space vs. object space. vs view space vs light space vs. etc.): applying a matrix of type World2View to a vector of type World would return a vector of type View. We could also implement all the nice things we are used to in physics: you cannot add meters and seconds, but you can divide meters per seconds to get a velocity. (NB: I have no idea yet as to how to implement the magic the builds a type &quot;meter/second&quot; from the types &quot;meter&quot; and &quot;second&quot;)","keywords":"","version":null},{"title":"The Dear ImGui model for user extensibility","type":0,"sectionRef":"#","url":"/blog/2021/05/28/the-dear-imgui-model","content":"Remove dependency on a backend, let users implement it the way they like, and provide implementations for popluar backend. I was scared to generalize my cam library because I thought I would need to use template, and know how to get the transpose of a matric for example. But this is much simpler, flexible, and does come with all the annoyances of templates (all the code in headers, harder for ides to handle) I don't know if its fait to call it that way; don't know if others do the same;.","keywords":"","version":null},{"title":"How I implemented scripting in two hours","type":0,"sectionRef":"#","url":"/blog/2022/04/29/scripting","content":"You can now write scripts to control CoolLab. Everything that you can do in the UI in now also doable through scripts. Moreover, you can write those scripts in the language of your choice! That's right, every language in the world will do, even the one you wrote last weekend and that only you possesses an interpreter for. All of this magic relies on a well knwown friend: the HTTP protocol. We provide an API that anyone can call; as long as you know how to make http requests from your language, you can write scripts for CoolLab. Pros: Cons:","keywords":"","version":null},{"title":"Hijacking the Dereference Operators","type":0,"sectionRef":"#","url":"/blog/2021/05/26/hijacking-the-dereference-operators","content":"I often end up writting classes that wrap other classes or primitive types. struct MyData { float field1; float field2; float field3; float field4; float field5; void do_something(); }; class MyDataWrapper { public: void do_something_else(); private: MyData _my_data; }; And for a long time I was annoyed when needing to access the underlying wrapped class. At first I was writting one getter function for each method or field of the wrapped class that I still needed to access. class MyDataWrapper { public: void do_something_else(); // -- Getters -- float field1() { return _my_data.field1; } float field2() { return _my_data.field2; } float field3() { return _my_data.field3; } float field4() { return _my_data.field4; } float field5() { return _my_data.field5; } void do_something() { _my_data.do_something(); } // -- Getters -- private: MyData _my_data; }; But that was a lot of boilerplate code to write and I couldn't stand it. It get's especially annoying when you do some refactor or API change, because now you have to propagate the changes in two classes instead of one. So I moved to having only one getter function, typically called get, that would return a reference to the whole wrapped class. class MyDataWrapper { public: void do_something_else(); // -- Getters -- const MyData&amp; get() const { return _my_data; } // -- Getters -- private: MyData _my_data; }; In my opinion this is already much better because the implementor of the wrapper class needs to write way less code, and doesn't need to maintain it when the wrapped class changes. But the API isn't as nice anymore ! We moved from my_data_wrapper.do_something(); to my_data_wrapper.get().do_something(); Basically, no matter what I call my getter function, it is still too long of a name and clutters the code. So here comes the ultimate solution : Overload the dereference operators ! This makes the API only one character longuer than the original solution, and doesn't require the implementor to write a lot of boilerplate code either ! The best of both worlds ! my_data_wrapper-&gt;do_something(); The only downside I can think of is that the syntax can be confusing for people who are not used to this pattern ; but I swear that when you are used to it, this is the greatest thing ever ! For reference, this is how you would overload the dereference operators : class MyDataWrapper { public: void do_something_else(); // -- Getters -- const MyData&amp; operator* () const { return _my_data; } const MyData* operator-&gt;() const { return &amp;operator*(); } // Reuse the implementation of operator* // -- Getters -- private: MyData _my_data; }; You can see this pattern in action in the Params module for example. This is also used in std::optional by the way !","keywords":"","version":null},{"title":"App Installers: How to properly release your application for end-users","type":0,"sectionRef":"#","url":"/blog/2023/08/15/App installer","content":"","keywords":"","version":null},{"title":"MacOS‚Äã","type":1,"pageTitle":"App Installers: How to properly release your application for end-users","url":"/blog/2023/08/15/App installer#macos","content":"","version":null,"tagName":"h2"},{"title":"Info.plist‚Äã","type":1,"pageTitle":"App Installers: How to properly release your application for end-users","url":"/blog/2023/08/15/App installer#infoplist","content":"Good documentation of all the keys:https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html ","version":null,"tagName":"h3"},{"title":"Shader Programming made Functional","type":0,"sectionRef":"#","url":"/blog/2022/08/23/shader-programming-made-functional","content":" üë©‚Äçüíª GLSL is a pretty low-level language. But what if we turned it into a classy functional programming language capable of handling higher-order functions? That is, giving it the ability to pass functions as parameters to other functions. Well, this is exactly what CoolLab does! In fact higher-order functions are so important that Inigo Quilez often usees them in pseudo-code: This idea stemed from the observation that modifiers, in order to modify an existing SDF, must change either its input or its output (sometimes both). This is why a CoolLab graph cannot be interpreted as a flow of data between functions: some nodes even though after some other node, must apply changes to the input of the function coming before them. In order to make this generic and give each node full control, we hade to make this functional: each node receives one (or more) function.s, and does whatever it wants with them: it can evaluate them with different input, evaluate them several times, whatever! TODO show how we define a node TODO Show a graph TODO Here is the code that gets generated:","keywords":"","version":null},{"title":"Get started","type":0,"sectionRef":"#","url":"/contribute/Communication/get-started","content":"","keywords":"","version":"Next"},{"title":"Join the Discord‚Äã","type":1,"pageTitle":"Get started","url":"/contribute/Communication/get-started#join-the-discord","content":"","version":"Next","tagName":"h2"},{"title":"Get added to the GitHub organization‚Äã","type":1,"pageTitle":"Get started","url":"/contribute/Communication/get-started#get-added-to-the-github-organization","content":"This will allow you to modify the tasks list and this website. If you don't already have one: create a GitHub account. Then ask an admin (Jules Fouchy) to add you to the organization: provide them your GitHub username. ","version":"Next","tagName":"h2"},{"title":"Install‚Äã","type":1,"pageTitle":"Get started","url":"/contribute/Communication/get-started#install","content":"To edit the website, install git, Node.js and VS Code. Then install those extensions for VS Code: git, markdown. ","version":"Next","tagName":"h2"},{"title":"Download the website sources‚Äã","type":1,"pageTitle":"Get started","url":"/contribute/Communication/get-started#download-the-website-sources","content":"git clone --recursive https://github.com/CoolLibs/CoolLibs.github.io  npm install  ","version":"Next","tagName":"h2"},{"title":"Pin useful pages‚Äã","type":1,"pageTitle":"Get started","url":"/contribute/Communication/get-started#pin-useful-pages","content":"Communication/tasks for example. ","version":"Next","tagName":"h2"},{"title":"Welcome","type":0,"sectionRef":"#","url":"/contribute","content":"Welcome moto We strive to be the friendliest open-source project to contribute to.","keywords":"","version":"Next"},{"title":"Tasks","type":0,"sectionRef":"#","url":"/contribute/Communication/tasks","content":"Tasks You can view and manage all the tasks on our GitHub project. Don't hesitate to add tasks there to help you keep track of your work and ideas. For example if you have an idea for a post on social medias, write it down before you forget it. It will also allow you to add details about it later if you need to. Also, having a list of all the things that have already been done can be very useful to future people who will work on our communication.","keywords":"","version":"Next"},{"title":"Contributors","type":0,"sectionRef":"#","url":"/contribute/contributors","content":"Contributors","keywords":"","version":"Next"},{"title":"Workflow | Branches TODO rename as \"When starting to work on something\"","type":0,"sectionRef":"#","url":"/contribute/Programming/branches","content":"Workflow | Branches TODO rename as &quot;When starting to work on something&quot; Create a branch on Cool, and a branch on CoolLab. They should both have the same name. tip Never commit on the main branch! We always work on branches, and then create pull requests that must be reviewed by others before merging them into main. Create a branch on Cool, and a branch on CoolLab. They should both have the same name.Switching between your branch and main is annoying because we use submodules and you would have two branches to switch and it can be painful. This is why we strongly recommend that you clone the repository twice, and you always leave one of them on main, and the other on your branch.","keywords":"","version":"Next"},{"title":"Editing the website","type":0,"sectionRef":"#","url":"/contribute/Communication/website","content":"","keywords":"","version":"Next"},{"title":"The markdown syntax‚Äã","type":1,"pageTitle":"Editing the website","url":"/contribute/Communication/website#the-markdown-syntax","content":"-&gt; You can preview with little button in the top-right If you want to see everything that's available, go here. ","version":"Next","tagName":"h2"},{"title":"Viewing your local modifications before pushing them online‚Äã","type":1,"pageTitle":"Editing the website","url":"/contribute/Communication/website#viewing-your-local-modifications-before-pushing-them-online","content":"Open a terminal and type npm start  ","version":"Next","tagName":"h2"},{"title":"Get the latest updates from other members (Pull)‚Äã","type":1,"pageTitle":"Editing the website","url":"/contribute/Communication/website#get-the-latest-updates-from-other-members-pull","content":"","version":"Next","tagName":"h2"},{"title":"Upload your modifications (Push)‚Äã","type":1,"pageTitle":"Editing the website","url":"/contribute/Communication/website#upload-your-modifications-push","content":"They will be visible on the website! (after a few minutes, you can see the progress here, if it red, you did something wrong! (probably a broken link)) If you want to share modifs with others, or ask for a review, you can push, but on a separate branch. See the next section. TODO: do bat scripts to simplify this process ? Simpler: put _ before your file name, those do not appear on the website (but be aware that they are still visible on our GitHub page, so don't put anything secret in them!) ","version":"Next","tagName":"h2"},{"title":"Pin useful pages‚Äã","type":1,"pageTitle":"Editing the website","url":"/contribute/Communication/website#pin-useful-pages","content":"","version":"Next","tagName":"h2"},{"title":"Find a page‚Äã","type":1,"pageTitle":"Editing the website","url":"/contribute/Communication/website#find-a-page","content":"If you see a page that does some cool stuff and want to know how they do it, you can find the corresponding source file easily! In VS Code press CTRL+P and look for the last part of its url. ","version":"Next","tagName":"h2"},{"title":"Find by word‚Äã","type":1,"pageTitle":"Editing the website","url":"/contribute/Communication/website#find-by-word","content":"CTRL+SHIFT+F to search whole website, or CTRL+F for current page. ","version":"Next","tagName":"h2"},{"title":"Financial Support","type":0,"sectionRef":"#","url":"/contribute/financial-support","content":"","keywords":"","version":"Next"},{"title":"Our goals with this money‚Äã","type":1,"pageTitle":"Financial Support","url":"/contribute/financial-support#our-goals-with-this-money","content":"fund internships, we want to teach people, and allow them to have a salary too: summer bootcamp (similar to Google Summer of Code). Help people get into this world of programming, make them discover ots of things We are very keen on taking interns and accompannying them in their learning journey. We want to deliver a great experience to everyone.share a part to other open-source projects that we are based on; contribute to the open-source in general FAQ : How do you currently get your money? I work as a fulltime rendering and software engineer, and invest back as much money as I can into this project. What are your plans with this money? Pay interns (and one day maybe fulltime developers) to work on this project. At the moment, even a few money per month can over a year sponsor the salary of an intern for two months. I also would personnaly love to be able to dedicate all my time to this project, but this implies being able to make a living out of it. What is the likelihood of this project succeeding? 100%, because I am dedicated and willing to invest all my time and resources. Even as of today we already provide great libraries that can be useful to many. The goal is to keep that effort going and become a reference for people who want to build applications. ","version":"Next","tagName":"h2"},{"title":"Workflow | Create a new library","type":0,"sectionRef":"#","url":"/contribute/Programming/creating-a-new-library","content":"","keywords":"","version":"Next"},{"title":"Brief‚Äã","type":1,"pageTitle":"Workflow | Create a new library","url":"/contribute/Programming/creating-a-new-library#brief","content":"If you are about to create a small system that doesn't have any dependencies on the rest of Cool, then making it into a standalone library makes a lot of sense. We try to do that whenever possible because it encourages a more decoupled and flexible design, and makes it easily reusable by others without having to include the whole of Cool. ","version":"Next","tagName":"h2"},{"title":"How to‚Äã","type":1,"pageTitle":"Workflow | Create a new library","url":"/contribute/Programming/creating-a-new-library#how-to","content":"Create a new repository from our template: ‚ö†Ô∏è Make sure the Owner is set to CoolLibs, not to your personal account!Add a short description. (This is optional, you can add it later if you want).Make sure the repo is public.Don't check Include all branches.Click Create repository from template. Add the library to our list of Standalone libraries under ## Standalone libraries by adding: &lt;a href=&quot;https://github.com/CoolLibs/mynewlib&quot;&gt; &lt;img align=&quot;center&quot; src=&quot;https://github-readme-stats.vercel.app/api/pin/?username=CoolLibs&amp;repo=mynewlib&quot; /&gt; &lt;/a&gt;  (NB: Replace the two occurences of mynewlib with the name of your library). Clone the repo recursively: git clone --recursive url/to/the/new/repo.In the cloned repo, fill in &quot;setup.py&quot; and run the script: it will setup everything and then remove the Python scripts used for the setup and amend the initial commit.commit as &quot;üéâ Initial commit&quot; and force push it.Implement the library.Once the library is stable and you are ready to mark it as v1, make a release on GitHub and write an article about it in our blog. ","version":"Next","tagName":"h2"},{"title":"Get started","type":0,"sectionRef":"#","url":"/contribute/Programming/get-started","content":"Get started Install clang-format and clang-tidy. Clang-format will format your code automatically, and clang-tidy will warn you when you make programming mistakes. These are two very important tools! You can find our To-Do list here. TODO create a page explaining how to edit the Default User Data (imgui.ini, color_config.json, etc) If you add a third-party library, check its license and, if it requires it, make sure we install the license in the CMake: # LICENSE set(CPACK_RESOURCE_FILE_LICENSE &quot;${CMAKE_SOURCE_DIR}\\\\\\\\LICENSE&quot;) install(FILES &quot;lib/cpp-httplib/LICENSE&quot; DESTINATION license/cpp-httplib) Talk about debug options (and you can create your own) Talk about shortcut for ImGui Item Picker Talk about the ImGui demo window TODO edit Lab's readme to point to the right section of this website for the devs. And move the part about how to run tests in this website.","keywords":"","version":"Next"},{"title":"Learn | Dear ImGui","type":0,"sectionRef":"#","url":"/contribute/Programming/dear-imgui","content":"","keywords":"","version":"Next"},{"title":"The Demo Window‚Äã","type":1,"pageTitle":"Learn | Dear ImGui","url":"/contribute/Programming/dear-imgui#the-demo-window","content":"The Demo window is a very useful tool that will show you everything that is possible to do with Dear ImGui. It can be opened from the &quot;Debug&quot; menu:  ","version":"Next","tagName":"h2"},{"title":"The Item Picker‚Äã","type":1,"pageTitle":"Learn | Dear ImGui","url":"/contribute/Programming/dear-imgui#the-item-picker","content":"If you want to see the code you need to call to create a given widget, use the &quot;Item Picker&quot; from the Demo window. Just click on any widget and it will take you to the corresponding piece of code in your IDE!  ","version":"Next","tagName":"h2"},{"title":"Important Dear ImGui functions‚Äã","type":1,"pageTitle":"Learn | Dear ImGui","url":"/contribute/Programming/dear-imgui#important-dear-imgui-functions","content":"","version":"Next","tagName":"h2"},{"title":"Begin() / End() to create a window‚Äã","type":1,"pageTitle":"Learn | Dear ImGui","url":"/contribute/Programming/dear-imgui#begin--end-to-create-a-window","content":"","version":"Next","tagName":"h3"},{"title":"SameLine()‚Äã","type":1,"pageTitle":"Learn | Dear ImGui","url":"/contribute/Programming/dear-imgui#sameline","content":"","version":"Next","tagName":"h3"},{"title":"Separator()‚Äã","type":1,"pageTitle":"Learn | Dear ImGui","url":"/contribute/Programming/dear-imgui#separator","content":"","version":"Next","tagName":"h3"},{"title":"PushID() / PopID()‚Äã","type":1,"pageTitle":"Learn | Dear ImGui","url":"/contribute/Programming/dear-imgui#pushid--popid","content":"See Dear ImGui's FAQ about IDs. ","version":"Next","tagName":"h3"},{"title":"ImGui Extras‚Äã","type":1,"pageTitle":"Learn | Dear ImGui","url":"/contribute/Programming/dear-imgui#imgui-extras","content":"We have quite a few additional custom widgets available in &lt;Cool/ImGui/ImGuiExtras.h&gt;. ","version":"Next","tagName":"h2"},{"title":"Guidelines | Git","type":0,"sectionRef":"#","url":"/contribute/Programming/git-guidelines","content":"","keywords":"","version":"Next"},{"title":"Make a lot of small commits‚Äã","type":1,"pageTitle":"Guidelines | Git","url":"/contribute/Programming/git-guidelines#make-a-lot-of-small-commits","content":"As soon as you have made some progress and the code compiles, make a commit ! Try to avoid mixing unrelated changes in a single commit: If you have made lots of changes, consider pushing them in separate commits that make sense. ","version":"Next","tagName":"h2"},{"title":"Message style‚Äã","type":1,"pageTitle":"Guidelines | Git","url":"/contribute/Programming/git-guidelines#message-style","content":"Be explicit. Don't strip words from your sentence. When appropriate, specify inside [] which class / file / module is modified by the commit. Example commit message: The class NodeEditor of the is0 module has been modified: ‚ú® [is0::NodeEditor] Generate sceneSDF from the nodes  ","version":"Next","tagName":"h2"},{"title":"Gitmoji‚Äã","type":1,"pageTitle":"Guidelines | Git","url":"/contribute/Programming/git-guidelines#gitmoji","content":"Use gitmoji. You can see the ones we use regularly in the tooling folder of any Cool project. ","version":"Next","tagName":"h2"},{"title":"Work on a branch‚Äã","type":1,"pageTitle":"Guidelines | Git","url":"/contribute/Programming/git-guidelines#work-on-a-branch","content":"Never commit directly to the main branch ! This is to avoid having to resolve merge conflicts on every commit while many people work on different aspects of the code. It is simpler that we each work on a branch, and only merge once in a while. When you start working on a feature, create a dedicated branch and work there. Once the feature is finished (or advanced enough that it would be interesting to merge): merge main into your branch and resolve any conflict that might arisesubmit a pull request and wait for the peer reviewonce the review is done the reviewer will merge your pull request ","version":"Next","tagName":"h2"},{"title":"Write nice Pull Requests‚Äã","type":1,"pageTitle":"Guidelines | Git","url":"/contribute/Programming/git-guidelines#write-nice-pull-requests","content":"Before you submit your PR for review: Double check the names you gave. Ask yourself: would someone who doesn't know the codebase have a clue as to what functionXxx() does?Look for duplicated code and refactor it away.Make sure the code will be easy to change in the future. ","version":"Next","tagName":"h2"},{"title":"Welcome","type":0,"sectionRef":"#","url":"/cool","content":"Welcome To get started you will use our demo project ; it is a great starting point that will show you many of the things you can do with Cool.","keywords":"","version":"Next"},{"title":"Guidelines | Documentation","type":0,"sectionRef":"#","url":"/contribute/Programming/documentation-guidelines","content":"","keywords":"","version":"Next"},{"title":"Write documentation‚Äã","type":1,"pageTitle":"Guidelines | Documentation","url":"/contribute/Programming/documentation-guidelines#write-documentation","content":"","version":"Next","tagName":"h2"},{"title":"Be close to the code‚Äã","type":1,"pageTitle":"Guidelines | Documentation","url":"/contribute/Programming/documentation-guidelines#be-close-to-the-code","content":"The documentation should be as close as possible to the thing it explains. This means that function and class documentation should be just above their declaration. To document the whole module there is a _README.md file inside each folder. (See Document your design decisions to know what to put in that ReadMe). ","version":"Next","tagName":"h2"},{"title":"Be complete‚Äã","type":1,"pageTitle":"Guidelines | Documentation","url":"/contribute/Programming/documentation-guidelines#be-complete","content":"Try to be as descriptive as possible in your documentation: mention any hickups and subtleties, and give an example if the usage is not obvious. /// Returns the Color of the (x, y) pixel. No bound checking is done, so undefined behaviour will occur if x is not inside [0, width() - 1] or y is not inside [0, height() - 1] /// (0, 0) is at the bottom-left of the image. Color&amp; color_at(unsigned int x, unsigned int y) { return _pixel_colors[x + y * _width]; }  ","version":"Next","tagName":"h2"},{"title":"Document only when necessary‚Äã","type":1,"pageTitle":"Guidelines | Documentation","url":"/contribute/Programming/documentation-guidelines#document-only-when-necessary","content":"There is no point in writting documentation if you can't do a better job than the function name already does. Only write documentation when you have something meaningful to add (which should be most of the time). For example, this is some useless documentation: /// Returns the minimum of the two numbers /// @param a The first number to compare /// @param b The second number to compare int min(int a, int b);  while this one is useful: /// Uses the `&lt;` operator to compare the two arguments. /// /!\\ Returns a reference to one of the arguments, so you can't pass a temporary value into this function or you will get a dangling reference! /// For example `const std::string&amp; res = min(&quot;yo&quot;s, my_string + &quot;!&quot;);` is a bug because `my_string + &quot;!&quot;` creates a temporary that will be destroyed at the end of the line, while `res` might be pointing to it. template&lt;typename T&gt; T&amp; min(T&amp; a, T&amp; b);  ","version":"Next","tagName":"h2"},{"title":"Document your design decisions‚Äã","type":1,"pageTitle":"Guidelines | Documentation","url":"/contribute/Programming/documentation-guidelines#document-your-design-decisions","content":"Each module is accompanied by a _README.md file. This is where we (and you) document our design process, the options we considered, the choices we made and why we made them. It is very useful to understand the intent of the people that came before you, which in turn helps you make a more educated decision as to how to work with the code. For example if the readme says &quot;I did it this way because I couldn't find any better solution&quot; then you know that you can safely rewrite the code and that the strange bits are not here for any particular reason. On the other hand if it says that the naive and simple solution actually doesn't work, then you know that the complex code is here for a reason, and if you still try to improve it at least you won't fall in the same pitfalls as the previous implementer did. It is a great way of creating and sharing knowledge: these resources will surely prove useful to many one day, and forcing you to write down the choices you made should have you question whether they are really the best and strive to improve your own design. This is also a great place to explain the overall architecture of the module, the relation between classes, where to look first etc.. The readme should be the first place to look when you want to understand a module. ","version":"Next","tagName":"h2"},{"title":"Compiling your first project","type":0,"sectionRef":"#","url":"/cool/building","content":"","keywords":"","version":"Next"},{"title":"Clone‚Äã","type":1,"pageTitle":"Compiling your first project","url":"/cool/building#clone","content":"Since we use Git submodules you need to clone them alongside the project. The easiest way is to use the command git clone --recursive https://github.com/CoolLibs/Lab  If later on while compiling you get an error like include could not find requested file: Cool/cmake/IncludeMe.cmake  it most likely means you forgot the submodules. To grab them after having cloned the project, use git submodule update --init --recursive  ","version":"Next","tagName":"h2"},{"title":"Vulkan‚Äã","type":1,"pageTitle":"Compiling your first project","url":"/cool/building#vulkan","content":"If you want to use Vulkan instead of OpenGL you will need to install the Vulkan SDK. Note that this is not required to get started with the Demo. ","version":"Next","tagName":"h2"},{"title":"Build‚Äã","type":1,"pageTitle":"Compiling your first project","url":"/cool/building#build","content":"Install CMake. If you already have it, make sure you have version 3.20 or greater. Then we recommend to use this VS Code extension: ms-vscode.cmake-tools. You will need to setup the extension with a compiler. Here is the tutorial. It is based on Linux but at the bottom of the page you will find the explanations to adapt it for Windows and Mac. ","version":"Next","tagName":"h2"},{"title":"WIP","type":0,"sectionRef":"#","url":"/cool/WIP","content":"WIP NB: This projet is still a big work in progress! We expect to release a V1 around the end of 2022.","keywords":"","version":"Next"},{"title":"Internships","type":0,"sectionRef":"#","url":"/internships","content":"Internships CoolLibs is very happy to take on interns each summer. We love teaching and sharing our passions! üìÑÔ∏è üë©‚Äçüíª Code üëÄ Open positions for Summer 2023 üìÑÔ∏è üì£ Communication üëÄ Open position for Summer 2023 üìÑÔ∏è üåê Web Development üëÄ Open position for Summer 2023","keywords":"","version":"Next"},{"title":"üë©‚Äçüíª Code","type":0,"sectionRef":"#","url":"/internships/code","content":"","keywords":"","version":"Next"},{"title":"üëÄ Open positions for Summer 2023‚Äã","type":1,"pageTitle":"üë©‚Äçüíª Code","url":"/internships/code#-open-positions-for-summer-2023","content":"","version":"Next","tagName":"h2"},{"title":"Missions‚Äã","type":1,"pageTitle":"üë©‚Äçüíª Code","url":"/internships/code#missions","content":"Yet to be determined ","version":"Next","tagName":"h2"},{"title":"Skills‚Äã","type":1,"pageTitle":"üë©‚Äçüíª Code","url":"/internships/code#skills","content":"Required: Modern C++ (C++20)The glsl shader languageComputer Graphics (OpenGL, or ideally Vulkan) Optional: Some knowledge of the Dear ImGui libraryA familiarity with one or more art software (Blender, Photoshop, Krita, TouchDesigner, ...) ","version":"Next","tagName":"h2"},{"title":"Details you need to know","type":0,"sectionRef":"#","url":"/cool/details","content":"","keywords":"","version":"Next"},{"title":"imgui.ini‚Äã","type":1,"pageTitle":"Details you need to know","url":"/cool/details#imguiini","content":"The imgui.ini file stores the position and size of our ImGui windows. It is nice to have it on the repo so that anyone cloning it will get a nice UI layout from the get go. But you might want to do git update-index --assume-unchanged imgui.ini  to ignore it from your commits. (It does change every time you move a window in your app, so basically it would be present in every commit). You should only commit it once in a while, when new windows are added for example. tip We have Python scripts that can help you automatically commit / discard / hide / show imgui.ini. They are at the root of the project and start with &quot;imgui_ini__&quot;. ","version":"Next","tagName":"h2"},{"title":"Logging‚Äã","type":1,"pageTitle":"Details you need to know","url":"/cool/details#logging","content":"To log to the console, use Log::info(&quot;You can use a variable, or a string like this one, which can be templated with some curly braces like so : {} {}&quot;, variable1ThatWillGoInTheCurlyBraces, variable2); Log::warn(&quot;same parameters&quot;); Log::error(&quot;same parameters&quot;);  The difference is that info outputs green text, warn is yellow and error is red. Also, error will trigger a breakpoint (you can use error_without_breakpoint instead if you don't want that behaviour). Note that those logs will be removed in release builds. If you want to display a message to the end user, use Log::ToUser instead of Log (you will need to include &lt;Cool/Log/ToUser.h&gt; ). ","version":"Next","tagName":"h2"},{"title":"OpenGL‚Äã","type":1,"pageTitle":"Details you need to know","url":"/cool/details#opengl","content":"","version":"Next","tagName":"h2"},{"title":"GLDebug‚Äã","type":1,"pageTitle":"Details you need to know","url":"/cool/details#gldebug","content":"Always wrap your OpenGL calls in the GLDebug(...) macro. It will add debug checks even if your computer doesn't support modern OpenGL debugging. GLDebug(GLuint program_id = glCreateProgram()); GLDebug(glLinkProgram(program_id)); GLDebug(glValidateProgram(program_id));  ","version":"Next","tagName":"h3"},{"title":"Modern Debugging‚Äã","type":1,"pageTitle":"Details you need to know","url":"/cool/details#modern-debugging","content":"Modern debugging requires OpenGL 4.3 or later. If you have it then it will happen automatically. You can ignore some warnings and control the look of the messages in the Window module, under internal/GLDebugCallback.h. ","version":"Next","tagName":"h3"},{"title":"üåê Web Development","type":0,"sectionRef":"#","url":"/internships/web-development","content":"","keywords":"","version":"Next"},{"title":"üëÄ Open position for Summer 2023‚Äã","type":1,"pageTitle":"üåê Web Development","url":"/internships/web-development#-open-position-for-summer-2023","content":"","version":"Next","tagName":"h2"},{"title":"Missions‚Äã","type":1,"pageTitle":"üåê Web Development","url":"/internships/web-development#missions","content":"We want to build a nice and interactive webpage to promote CoolLab. The intern will have to design and build the webpage, from mockup to code. ","version":"Next","tagName":"h2"},{"title":"Skills‚Äã","type":1,"pageTitle":"üåê Web Development","url":"/internships/web-development#skills","content":"Required: Web Development Optional: Three JSAn artistic sensibilityA familiarity with one or more art software (Blender, Photoshop, Krita, TouchDesigner, ...) ","version":"Next","tagName":"h2"},{"title":"üì£ Communication","type":0,"sectionRef":"#","url":"/internships/communication","content":"","keywords":"","version":"Next"},{"title":"üëÄ Open position for Summer 2023‚Äã","type":1,"pageTitle":"üì£ Communication","url":"/internships/communication#-open-position-for-summer-2023","content":"","version":"Next","tagName":"h2"},{"title":"Missions‚Äã","type":1,"pageTitle":"üì£ Communication","url":"/internships/communication#missions","content":"The overall goal of this intership will be to give as much visibility as possible to our software CoolLab and our initiatives for the open-source world. We want to raise interest in our software, have plenty of people try it, and start to raise funds through donations and sponsorships. In order to achieve those goals the intern will have to: Create content for our social media accounts (Instagram, TikTok, ...) and manage themShare our artworks and articles on as many platforms as possible (Reddit, social media, ...)Maintain and improve the contents on this websitePromote our fundraising campaignAny other ideas coming from the intern about how to improve our visibility will be welcome and considered with great care ","version":"Next","tagName":"h2"},{"title":"Skills‚Äã","type":1,"pageTitle":"üì£ Communication","url":"/internships/communication#skills","content":"Required: Good written englishCommunication skills, good writingKnowledge of social mediasSerious, dedication and consistency Optional: A familiarity with one or more art software (Blender, Photoshop, Krita, TouchDesigner, ...)Some knowledge of programming and/or the problematics met by open-source softwares ","version":"Next","tagName":"h2"},{"title":"Lab","type":0,"sectionRef":"#","url":"/lab","content":"Lab Our new website is here: https://coollab-art.com/","keywords":"","version":"Next"},{"title":"Our Philosophy","type":0,"sectionRef":"#","url":"/lab/Dev/our-philosophy","content":"","keywords":"","version":"Next"},{"title":"Learn and create resources for others to learn‚Äã","type":1,"pageTitle":"Our Philosophy","url":"/lab/Dev/our-philosophy#learn-and-create-resources-for-others-to-learn","content":"We are here to learn and share. As the name Lab suggests this is a place to make experiments and try out implementations. By writing documentation and blog articles we also strive to share our findings with others. ","version":"Next","tagName":"h2"},{"title":"Don't worry about what already exists‚Äã","type":1,"pageTitle":"Our Philosophy","url":"/lab/Dev/our-philosophy#dont-worry-about-what-already-exists","content":"If you want to build something, go ahead! While looking for inspiration, you will likely stumble upon people that have already done what you had in mind, perhaps even better. But if you let this stop you from starting your own version of this idea, you will never write a single line of code :( Remember that we are here to learn and write code because we enjoy writing code. Don't let any other consideration stop you from doing what you want! Telling a developer there is already code to do that is like telling a songwritter there is already a song about love - Every developer  tip It is when multiple people implement similar ideas that the best ones emerge. We can all learn from each other and anyone has a chance of finding sweet little details that improve the whole system. ","version":"Next","tagName":"h2"},{"title":"Easy to use‚Äã","type":1,"pageTitle":"Our Philosophy","url":"/lab/Dev/our-philosophy#easy-to-use","content":"We can't produce as many cool features as big softwares, so we should embrace our minimalistic essence and produce few but polished and intuitive features. Our tool might only be useful for a few use cases, but we want it to be the best for those use cases. ","version":"Next","tagName":"h2"},{"title":"Build an ecosystem of open-source libraries‚Äã","type":1,"pageTitle":"Our Philosophy","url":"/lab/Dev/our-philosophy#build-an-ecosystem-of-open-source-libraries","content":"With Cool we aim to produce high-quality libraries that everyone can use and contribute to. ","version":"Next","tagName":"h2"},{"title":"Freedom‚Äã","type":1,"pageTitle":"Our Philosophy","url":"/lab/Dev/our-philosophy#freedom","content":"CoolLab must facilitate the experimenting process of generative art: it must be easy to iterate, customize, try things: you plug in nodes, things happen, you get visual and textual feedback if you do something wrong that cannot work (e.g. trying to connect incompatible types of nodes together). (Idea: the first time you do something wrong there is visual feedback, and if you do it again a popup with an error message appears). ","version":"Next","tagName":"h2"},{"title":"Prefer Visual Quality to Performance‚Äã","type":1,"pageTitle":"Our Philosophy","url":"/lab/Dev/our-philosophy#prefer-visual-quality-to-performance","content":"We are not building a game engine; even though performance is important because we want to be able to visualize our changes in real time, visual quality is and should remain our main focus. ","version":"Next","tagName":"h2"},{"title":"Be cross-platform‚Äã","type":1,"pageTitle":"Our Philosophy","url":"/lab/Dev/our-philosophy#be-cross-platform","content":"Refuse any solution that would reduce accessibility to the software, especially when cross-platform solutions exist. Examples of such technologies are Cuda (Nvidia only, can be replaced by Vulkan's compute shaders) and OpenGL 4.0 and greater (not suported on MacOS, can be replaced by Vulkan or WebGPU). ","version":"Next","tagName":"h2"},{"title":"Non-destructive / Procedural‚Äã","type":1,"pageTitle":"Our Philosophy","url":"/lab/Dev/our-philosophy#non-destructive--procedural","content":"Destructive workflows are so frustrating and stressful to me ","version":"Next","tagName":"h2"},{"title":"Programmer-like workflow‚Äã","type":1,"pageTitle":"Our Philosophy","url":"/lab/Dev/our-philosophy#programmer-like-workflow","content":"I want CoolLab projects to be versionnable through Github. This means that our project files should be text-based (json or xml). ","version":"Next","tagName":"h2"},{"title":"Build great debug tools‚Äã","type":1,"pageTitle":"Our Philosophy","url":"/lab/Dev/our-philosophy#build-great-debug-tools","content":"They will help you a lot later down the road. And they can also be helpful to users, so keep them in the final build: for example to view the history, or the registries. ","version":"Next","tagName":"h2"},{"title":"Inspirations","type":0,"sectionRef":"#","url":"/lab/Dev/inspirations","content":"","keywords":"","version":"Next"},{"title":"Videos‚Äã","type":1,"pageTitle":"Inspirations","url":"/lab/Dev/inspirations#videos","content":"Max Cooper - Order From Chaos (official video by Maxime Causeret)Max Cooper - Waves (official video by Kevin McGloughlin)Spaghetti Coder - ClockwiseN'to - Note Blanche ","version":"Next","tagName":"h2"},{"title":"Procedural techniques‚Äã","type":1,"pageTitle":"Inspirations","url":"/lab/Dev/inspirations#procedural-techniques","content":"Sebastian Lague - Coding Adventure: Ant and Slime Simulations ","version":"Next","tagName":"h2"},{"title":"Use cases‚Äã","type":1,"pageTitle":"Inspirations","url":"/lab/Dev/inspirations#use-cases","content":"Split an image into several ones based on regions of similar brightness, then display those images on planes in 3D that are offset along the Z axis (cf Rom1)Stained glass: run a shader that creates distinct regions, then colorize those regions, then compute edges, then magnify those edges (blur + threshold), then add them back on top of the image. Then bloom on a given part of the image. ","version":"Next","tagName":"h2"},{"title":"Guidelines | Coding","type":0,"sectionRef":"#","url":"/contribute/Programming/coding-guidelines","content":"","keywords":"","version":"Next"},{"title":"Keep functions short‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#keep-functions-short","content":"This helps a lot with code readability and code reuse. To learn more: Learn Clean Code with C++. tip As soon as a function becomes too long, split it into several smaller functions. ","version":"Next","tagName":"h2"},{"title":"Prefer free functions‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#prefer-free-functions","content":"They help a lot with decoupling, code reuse, testing, etc. NB: This doesn't mean that member functions are bad or that you should never use them. If you need to encapsulate data and only access it in well defined ways, a member function is the way to go. But if something can be done using only the public interface of a class, then a free function is preferable to a member function. To learn more: Learn Clean Code with C++. note All the free functions related to a class ClassName should be put in a namespace called ClassNameU. The U stands for &quot;Utility&quot;. These functions should be in the same file as the class they relate to: this makes it easy to find them. ","version":"Next","tagName":"h2"},{"title":"Appreciate simple structs‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#appreciate-simple-structs","content":"They are amazing to group data together, and make for very great abstractions. As long as your data doesn't have to respect any invariant, a struct is preferable to a class because it is simpler. Often they will help with parameter passing: if you realize that you are passing the same 4 arguments around, then it probably means that there is room for an abstraction here. Puting these 4 values into a struct makes the intent clearer, and also reduces knowledge duplication (if you at some point need to add a 5th value to achieve what you need to do, you don't have to edit a bunch of functions that had the same 4 parameters, you can just edit the struct). With C++ 20's designated initializers, structs have become even more awesome: they make your code more readable and allow for named parameters: // Not readable at all! You have to go look up what WindowConfig is. Cool::run&lt;App&gt;({Cool::WindowConfig{&quot;Cool Lab&quot;, 1280, 720, true, false}}); // Completely clear Cool::run&lt;App&gt;({Cool::WindowConfig{.title = &quot;Cool Lab&quot;, .initial_width = 1280, .initial_height = 720, .cap_framerate_on_startup_if = true, .maximize_on_startup_if = false}});  To learn more: Learn Clean Code with C++. ","version":"Next","tagName":"h2"},{"title":"Keep cohesion inside your classes‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#keep-cohesion-inside-your-classes","content":"A class should not be too big, and should not be handling the details of more than one system. If you start to see different and independent bits of logic grow inside a class, then separate them in two classes. In short, follow the Single Responsibility Principle. To learn more: Learn Clean Code with C++. ","version":"Next","tagName":"h2"},{"title":"Use behavioural inheritance with great care‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#use-behavioural-inheritance-with-great-care","content":"Class hierarchies can easily become wild and hard to understand. Also, there are very few domains that are actually accurately modeled by a hierarchical structure. This means that often (in poorly designed class hierarchies), some child classes end up inheriting things that they don't need, because there isn't a strict is a relationship between them and their parents. Composition is much more flexible than inheritance and should be prefered in most cases. By using small structs and free functions you can achieve the same code reuse as with inheritance, but with less coupling! (And actually it is even easier to reuse code this way). If you are want polymorphism, you can achieve it dynamically through std::variant or type erasure, and statically through function overloading and templates. To learn more: Learn Clean Code with C++. ","version":"Next","tagName":"h2"},{"title":"Name with empathy‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#name-with-empathy","content":"Naming is important (and hard), so please be mindful when you choose a name. Be explicit, don't be too afraid of long names. And most importantly: make sure the name describes what the thing is, nothing more, nothing less. Also, don't hesitate to rename as soon as you find a better name to describe what your thing actually is or does. (And by the way, right click -&gt; Rename is an amazing feature). The ideal name is very concise and allows readers to instantly understand what the thing is / does. If you can't find such a name, then the second best thing is a long name that still perfectly describes the object. Only misleading names are bad and not tolerated. About naming (watch from 41:34 to 51:30 if you want to laugh a lot) (By the way, watch the whole conference it's great). A whole conference by Kate Gregory. tip To help you find good names, imagine yourself explaining to someone what the function does (or even better, actually find someone and explain it to them). Listen to the words that you will naturally say: they will often be a very good name for your function. And even if it is a full sentence, a long name is better than a bad one. To learn more: Learn Clean Code with C++. ","version":"Next","tagName":"h2"},{"title":"Fix bugs as you see them‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#fix-bugs-as-you-see-them","content":"Or at least write them down in our To-Do list. No codebase is perfect and bugs and poor code exist everywhere. If you think you just spotted one, take a deeper look into it. Try to fix it or at least raise other people's attention about it. ","version":"Next","tagName":"h2"},{"title":"Refer to the C++ Core Guidelines‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#refer-to-the-c-core-guidelines","content":"There are a lot of great people out there that have gathered a big list of great ideas and best practices. You can start by watching this amazing conference:  ","version":"Next","tagName":"h2"},{"title":"Write debug checks‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#write-debug-checks","content":"If there is some invariant that must be verified, add debug checks to make sure users of your code don't mess up! You can use assert() in the simpler cases, but sometimes you will need to add variables to keep track of some state. In that case, wrap the debug code in a #if DEBUG // . . . #endif  block so that it doesn't impact release build performance. An example would be to make sure an initialization function is called once, and only once: class MyClass { public: void initialize() { #if DEBUG assert(!_is_initialized); _is_initialized = true; #endif // . . . } void use_my_class() { assert(_is_initialized); // . . . } private: #if DEBUG bool _is_initialized = false; #endif };  ","version":"Next","tagName":"h2"},{"title":"Never use std::filesystem functions directly, use Cool::File instead‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#never-use-stdfilesystem-functions-directly-use-coolfile-instead","content":"We wrap the std::filesystem functions and handle excepetions. Note that using the types are fine (e.g. you can freely use std::filesystem::path) ","version":"Next","tagName":"h2"},{"title":"Coding style‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#coding-style","content":"Coding styles don't matter, and that's why we simply have to choose one and stick to it. There is no right answer to where you should put your curly braces, or whether you shoud use camelCase or snake_case. If there was, all the developers of the world would have agreed on it years ago. ","version":"Next","tagName":"h2"},{"title":"Snake Case‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#snake-case","content":"I used to use camelCase, and then started to learn Rust which forces you to use snake_case. And well, after a short period of adaptation I started really enjoying snake case because the separation between words is clearer, and therefore long names are easier to read. We use snake_case for variables and functions.We use PascalCase for types, namespaces and enum values. ","version":"Next","tagName":"h3"},{"title":"Member variables‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#member-variables","content":"They are prefixed with an underscore like so: class MyClass { // ... private: float _my_member_variable = 0.f; };  ","version":"Next","tagName":"h3"},{"title":"Formatting‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#formatting","content":"We use the famous clang-format as our formatting tool. You will need to install it (on Windows this happens through the Visual Studio Installer: modify your Visual Studio Build Tools and add C++ Clang Tools for Windows). Then for VS Code I recommend this extension: xaver.clang-format; and you should enable Format on Save in your VS Code settings. After that it should just work. Note that in some very specific cases you can disable clang-format locally to use some non-standard formatting, using these special comments: // clang-format off void on_mouse_move (Camera&amp; camera, glm::vec2 const&amp; delta) { std::visit([&amp;](auto&amp;&amp; state) { state.on_mouse_move (*this, camera, delta); }, _state); } void on_wheel_down (Camera&amp; camera, int mods) { std::visit([&amp;](auto&amp;&amp; state) { state.on_wheel_down (*this, camera, mods); }, _state); } void on_wheel_up (Camera&amp; camera) { std::visit([&amp;](auto&amp;&amp; state) { state.on_wheel_up (*this, camera); }, _state); } void on_wheel_scroll(Camera&amp; camera, float dl) { std::visit([&amp;](auto&amp;&amp; state) { state.on_wheel_scroll(*this, camera, dl); }, _state); } // clang-format on  ","version":"Next","tagName":"h3"},{"title":"Use trailing return types‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#use-trailing-return-types","content":"Don't bool do_something();  Do auto do_something() -&gt; bool;  Do void do_something();  ","version":"Next","tagName":"h3"},{"title":"Initialize with {}‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#initialize-with-","content":"Don't int a = 5;  Do int a{5};  ","version":"Next","tagName":"h3"},{"title":"Distinguish pointers and references‚Äã","type":1,"pageTitle":"Guidelines | Coding","url":"/contribute/Programming/coding-guidelines#distinguish-pointers-and-references","content":"Pointers indicate that null is a possibility, whereas references are guaranteed to always point to something. ","version":"Next","tagName":"h3"},{"title":"Our Roadmap","type":0,"sectionRef":"#","url":"/lab/Dev/our-roadmap","content":"Our Roadmap See our GitHub Project.","keywords":"","version":"Next"},{"title":"Alma","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/alma","content":"Alma https://www.alma.sh/","keywords":"","version":"Next"},{"title":"Autograph","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/autograph","content":"Autograph","keywords":"","version":"Next"},{"title":"Blender","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/blender","content":"Blender","keywords":"","version":"Next"},{"title":"Cables","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/cables","content":"Cables Cables.","keywords":"","version":"Next"},{"title":"Similar Softwares","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares","content":"Similar Softwares We have a lot to learn from other softwares that share some similarities with CoolLab. They have a lot of great ideas that we could implement too. (Also checkout this list) This guy covers a lot of cool software: Gamefromscratch üìÑÔ∏è Alma https://www.alma.sh/ üìÑÔ∏è Autograph üìÑÔ∏è Blender üìÑÔ∏è Cables Cables. üìÑÔ∏è Fusion https://www.blackmagicdesign.com/products/fusion üìÑÔ∏è GeeXLab GeeXLab üìÑÔ∏è grasshopper https://youtu.be/zDDVeDldvaI üìÑÔ∏è Hydra https://youtu.be/NX2BXWuVtRM üìÑÔ∏è KodeLife https://hexler.net/kodelife üìÑÔ∏è Krita Krita üìÑÔ∏è MagicaCSG MagicaCSG üìÑÔ∏è mandelbulb https://www.mandelbulb.com/2014/mandelbulb-3d-mb3d-fractal-rendering-software/ üìÑÔ∏è MaterialMaker's RayMarching plugin On GitHub. üìÑÔ∏è material-maker https://www.materialmaker.org/ üìÑÔ∏è Nodes https://nodes.io/ üìÑÔ∏è NodeToy https://nodetoy.co/ üìÑÔ∏è Notch https://www.notch.one/ üìÑÔ∏è Resolve Da Vinci Resolve üìÑÔ∏è SHADERed SHADERed üìÑÔ∏è substance-designer üìÑÔ∏è substance-painter üìÑÔ∏è Tooll Their source code is on GitHub. üìÑÔ∏è TouchDesigner üìÑÔ∏è Unity üìÑÔ∏è Unreal Engine üìÑÔ∏è Womp","keywords":"","version":"Next"},{"title":"Fusion","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/fusion","content":"Fusion https://www.blackmagicdesign.com/products/fusion","keywords":"","version":"Next"},{"title":"GeeXLab","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/geexlab","content":"GeeXLab GeeXLab","keywords":"","version":"Next"},{"title":"Hydra","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/hydra","content":"Hydra https://youtu.be/NX2BXWuVtRM","keywords":"","version":"Next"},{"title":"grasshopper","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/grasshopper","content":"grasshopper https://youtu.be/zDDVeDldvaI","keywords":"","version":"Next"},{"title":"KodeLife","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/kodelife","content":"KodeLife https://hexler.net/kodelife","keywords":"","version":"Next"},{"title":"MagicaCSG","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/magica-csg","content":"MagicaCSG MagicaCSG","keywords":"","version":"Next"},{"title":"mandelbulb","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/mandelbulb","content":"mandelbulb https://www.mandelbulb.com/2014/mandelbulb-3d-mb3d-fractal-rendering-software/","keywords":"","version":"Next"},{"title":"MaterialMaker's RayMarching plugin","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/material-maker-raymarching","content":"MaterialMaker's RayMarching plugin On GitHub.","keywords":"","version":"Next"},{"title":"material-maker","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/material-maker","content":"material-maker https://www.materialmaker.org/","keywords":"","version":"Next"},{"title":"Krita","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/krita","content":"Krita Krita","keywords":"","version":"Next"},{"title":"NodeToy","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/nodetoy","content":"NodeToy https://nodetoy.co/","keywords":"","version":"Next"},{"title":"Notch","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/notch","content":"Notch https://www.notch.one/ The have a SDF-based system very similar to is0.","keywords":"","version":"Next"},{"title":"Resolve","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/resolve","content":"Resolve Da Vinci Resolve","keywords":"","version":"Next"},{"title":"SHADERed","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/shadered","content":"SHADERed SHADERed","keywords":"","version":"Next"},{"title":"Nodes","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/nodes","content":"Nodes https://nodes.io/ Interesting node graph: the params of the nodes are on a seperate window on the side: cleans up the graph, makes it more readable. (But we can't do that because we want all parameters to be controllable via the graph and connecting them to nodes)","keywords":"","version":"Next"},{"title":"TouchDesigner","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/touch-designer","content":"TouchDesigner","keywords":"","version":"Next"},{"title":"Unity","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/unity","content":"Unity","keywords":"","version":"Next"},{"title":"substance-designer","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/substance-designer","content":"substance-designer","keywords":"","version":"Next"},{"title":"substance-painter","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/substance-painter","content":"substance-painter","keywords":"","version":"Next"},{"title":"Unreal Engine","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/unreal","content":"Unreal Engine","keywords":"","version":"Next"},{"title":"Tooll","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/tooll","content":"Tooll Their source code is on GitHub.","keywords":"","version":"Next"},{"title":"Welcome","type":0,"sectionRef":"#","url":"/learn","content":"Welcome In here you will find a lot of great resources that will get you equiped to understand everything we do in Cool and CoolLab.","keywords":"","version":"Next"},{"title":"Womp","type":0,"sectionRef":"#","url":"/lab/Dev/Similar Softwares/womp","content":"Womp","keywords":"","version":"Next"},{"title":"The Big Architectural Plan","type":0,"sectionRef":"#","url":"/lab/Dev/the-big-architectural-plan","content":"","keywords":"","version":"Next"},{"title":"‚úÖ Part 1: Objects Registries‚Äã","type":1,"pageTitle":"The Big Architectural Plan","url":"/lab/Dev/the-big-architectural-plan#-part-1-objects-registries","content":"Done! This is our reg library. ","version":"Next","tagName":"h2"},{"title":"üöß Part 2: The Command pattern‚Äã","type":1,"pageTitle":"The Big Architectural Plan","url":"/lab/Dev/the-big-architectural-plan#-part-2-the-command-pattern","content":"See the readme of our cmd library. ","version":"Next","tagName":"h2"},{"title":"","type":1,"pageTitle":"The Big Architectural Plan","url":"/lab/Dev/the-big-architectural-plan##","content":"What are the problems with global access ? Does our Command-based architexture suffer from it? hard to change: tied to the existence of one specific thinghard to know all the people who mutate it ","version":"Next","tagName":"h3"},{"title":"üöß Part 2b: Parameters and History‚Äã","type":1,"pageTitle":"The Big Architectural Plan","url":"/lab/Dev/the-big-architectural-plan#-part-2b-parameters-and-history","content":"Once the Registries and the Commands are in place we can improve our existing Parameters and History systems. This is an optional step that doesn't prevent us from moving on to part 3. ","version":"Next","tagName":"h2"},{"title":"üî≠ Part 3: The Rendering Dispatcher‚Äã","type":1,"pageTitle":"The Big Architectural Plan","url":"/lab/Dev/the-big-architectural-plan#-part-3-the-rendering-dispatcher","content":"We want to &quot;multithread&quot; our use of the GPU. For example the UI (ImGui) is rendered on the GPU, and we don't want it to be blocked by the fact that some of our shaders could take seconds to render a nice ray-traced scene. This should be possible to achieve by using Async Compute: ImGui is rendered using the &quot;main&quot; graphics queue, while the heavy rendering work is dony on compute-only queues. See this explanation of the different queues and the architecture of modern GPUs. Since most of our shaders are fullscreen passes they should be easy to turn into compute shaders and run asynchronously. Another technique that will help us is to split the rendering of an image into tiles, allowing us to split the rendering over several frames, and display parts of the image as they get rendered. Or alternatively we could render for example one pixel out of four: this would allow us to have a &quot;low-res&quot; version of our image quickly, and then the other pixels can be computed later. This should be better than the tile-based approach to get an idea of what the whole image looks like. On the other hand the tile-based version quickly shows you the final quality, though on only a fraction of the image. Mesh shaders are also an interesting topic to look into. ","version":"Next","tagName":"h2"},{"title":"üî≠ Part 4: Modules and Scenes‚Äã","type":1,"pageTitle":"The Big Architectural Plan","url":"/lab/Dev/the-big-architectural-plan#-part-4-modules-and-scenes","content":"Modules know what their dependencies are, and only refresh their output image when needed. A Scene is a graph of modules that interact together. ","version":"Next","tagName":"h2"},{"title":"üî≠ Part 5: The Timeline‚Äã","type":1,"pageTitle":"The Big Architectural Plan","url":"/lab/Dev/the-big-architectural-plan#-part-5-the-timeline","content":"The Timeline lays out the different Scenes in time, and allows basic compositing of them (for example one scene on top of another). ","version":"Next","tagName":"h2"},{"title":"The Basics","type":0,"sectionRef":"#","url":"/learn/C++/the-basics","content":"The Basics The Cherno has a lot of great videos that will cover all the basic things you need to know about C++, and even a little more than that! Watch his C++ series.","keywords":"","version":"Next"},{"title":"Financial Support","type":0,"sectionRef":"#","url":"/lab/financial-support","content":"","keywords":"","version":"Next"},{"title":"Our goals with this money‚Äã","type":1,"pageTitle":"Financial Support","url":"/lab/financial-support#our-goals-with-this-money","content":"fund internships, we want to teach people, and allow them to have a salary too: summer bootcamp (similar to Google Summer of Code). Help people get into this world of programming, make them discover ots of things We are very keen on taking interns and accompannying them in their learning journey. We want to deliver a great experience to everyone.share a part to other open-source projects that we are based on; contribute to the open-source in general FAQ : How do you currently get your money? I work as a fulltime rendering and software engineer, and invest back as much money as I can into this project. What are your plans with this money? Pay interns (and one day maybe fulltime developers) to work on this project. At the moment, even a few money per month can over a year sponsor the salary of an intern for two months. I also would personnaly love to be able to dedicate all my time to this project, but this implies being able to make a living out of it. What is the likelihood of this project succeeding? 100%, because I am dedicated and willing to invest all my time and resources. Even as of today we already provide great libraries that can be useful to many. The goal is to keep that effort going and become a reference for people who want to build applications. ","version":"Next","tagName":"h2"},{"title":"Dear ImGui","type":0,"sectionRef":"#","url":"/learn/C++/dear-imgui","content":"Dear ImGui Dear ImGui is a very popular GUI library, and this is the one we use. You can learn all about it here.","keywords":"","version":"Next"},{"title":"Physically Based Rendering","type":0,"sectionRef":"#","url":"/learn/Computer Graphics/pbr","content":"Physically Based Rendering Blender Tutorial - Physically Based Rendering (PBR) and the Principled Node, learn what PBR is, what specular, roughness, metallic, etc. mean and what are all the visual properties of all of these. Computer Graphics Tutorial - PBR (Physically Based Rendering) The math behind PBR","keywords":"","version":"Next"},{"title":"Lessons by K√°roly Zsolnai and Thomas Auzinger","type":0,"sectionRef":"#","url":"/learn/Computer Graphics/karoly-zsolnai-course","content":"Lessons by K√°roly Zsolnai and Thomas Auzinger https://users.cg.tuwien.ac.at/zsolnai/gfx/rendering-course/","keywords":"","version":"Next"},{"title":"Watch Conferences","type":0,"sectionRef":"#","url":"/learn/C++/watch-conferences","content":"Watch Conferences Once you have a good mastery of C++, watching conferences is what will take you to the next level! Don't worry if the first ones are hard for you to understand, you will learn as you watch more and more, and before you realize you will have learned a ton! You can find a list of amazing conferences to watch right here. Watching them in the proposed order is a good strategy.","keywords":"","version":"Next"},{"title":"Lessons by Keenan Crane","type":0,"sectionRef":"#","url":"/learn/Computer Graphics/keenan-crane-course","content":"Lessons by Keenan Crane Watch the best lessons of the universe on Youtube.","keywords":"","version":"Next"},{"title":"OpenGL","type":0,"sectionRef":"#","url":"/learn/GPU APIs/opengl","content":"OpenGL The Cherno has a lot of great videos that will cover all the basic things you need to know about OpenGL, and even a little more than that! Watch his OpenGL series.","keywords":"","version":"Next"},{"title":"Vulkan","type":0,"sectionRef":"#","url":"/learn/GPU APIs/vulkan","content":"Vulkan Brendan Galea has a great video series on Vulkan for beginners. It also covers some basic computer graphics topics. Then the classic and golden Vulkan Tutorial is another amazing resource.","keywords":"","version":"Next"},{"title":"intro","type":0,"sectionRef":"#","url":"/learn/Discover the Codebase/intro","content":"intro TODO: add exercises to discover the code base; for example: try to create a Command that says &quot;Hello World&quot; (and &quot;Goodbye World&quot; when it is reverted).","keywords":"","version":"Next"},{"title":"Compute Shaders","type":0,"sectionRef":"#","url":"/learn/GPU APIs/compute-shaders","content":"Compute Shaders https://youtu.be/nF4X9BIUzx0 (memort barriers, synchro, warp size)","keywords":"","version":"Next"},{"title":"Shader-based art","type":0,"sectionRef":"#","url":"/learn/Procedural Techniques/shader-based-art","content":"Shader-based art Practical intro to shader programming by The Art of Code.","keywords":"","version":"Next"},{"title":"Generative Art","type":0,"sectionRef":"#","url":"/learn/Procedural Techniques/generative-art","content":"Generative Art Tim Holman - Generative Art Speedrun: Basic concepts and some algorithms of generative art. &quot;How to Hack a Painting&quot; by Tyler Hobbs","keywords":"","version":"Next"},{"title":"Fluid Simulation","type":0,"sectionRef":"#","url":"/learn/Procedural Techniques/fluid-simlation","content":"Fluid Simulation","keywords":"","version":"Next"},{"title":"Voronoi","type":0,"sectionRef":"#","url":"/learn/Procedural Techniques/voronoi","content":"Voronoi Voronoi Explained!, The Art of Code","keywords":"","version":"Next"},{"title":"Soft Body Simulation","type":0,"sectionRef":"#","url":"/learn/Procedural Techniques/soft-body-simulation","content":"Soft Body Simulation","keywords":"","version":"Next"},{"title":"Bezier Curves","type":0,"sectionRef":"#","url":"/learn/Maths/bezier-curves","content":"Bezier Curves","keywords":"","version":"Next"}],"options":{"excludeRoutes":[],"id":"default"}}